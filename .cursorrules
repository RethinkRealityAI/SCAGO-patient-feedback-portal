# SCAGO Patient Feedback Portal - AI System Management Rules

## AI System Architecture Overview

### Core AI Components
- **Model**: Gemini 2.5 Flash Lite (cost-efficient, high-throughput)
- **Framework**: Google Genkit with Firebase integration
- **Configuration**: Server-side only (secure API key management)
- **Features**: Analysis, Chat, Report Generation, CSV Mapping

### File Structure & Responsibilities

#### AI Configuration Files
```
src/ai/
├── genkit.ts              # Main Genkit configuration (Gemini 2.5 Flash Lite)
├── client.ts              # Virtual assistant client
├── dev.ts                 # Development server entry point
└── flows/
    ├── analyze-feedback-flow.ts    # Individual feedback analysis
    ├── chat-with-data-flow.ts      # Interactive data chat
    ├── generate-report-flow.ts     # Comprehensive report generation
    ├── csv-participant-mapper-flow.ts  # CSV import mapping
    └── types.ts                    # AI flow type definitions
```

#### Integration Points
```
src/app/dashboard/actions.ts        # AI analysis server actions
src/components/ai-chat-interface.tsx # Chat UI component
src/components/floating-chat-button.tsx # Chat trigger button
```

## AI System Rules & Best Practices

### 🔐 Security & Configuration

#### DO:
- ✅ **Always use server-side AI calls** - All AI functions must use `'use server'` directive
- ✅ **Keep API keys in `.env.local`** - Never commit actual API keys to version control
- ✅ **Use environment variables** - `GOOGLE_API_KEY` for authentication
- ✅ **Validate AI inputs** - Always validate data before sending to AI models
- ✅ **Handle AI errors gracefully** - Provide fallback responses for AI failures

#### DON'T:
- ❌ **Never expose API keys client-side** - AI calls must be server-side only
- ❌ **Don't hardcode AI responses** - Use dynamic AI generation
- ❌ **Don't skip error handling** - AI services can fail, always handle gracefully
- ❌ **Don't bypass validation** - Always validate inputs before AI processing

### 🏗️ Architecture Patterns

#### AI Flow Structure
```typescript
// ✅ CORRECT: Standard AI flow pattern
export async function aiFunction(input: InputType): Promise<OutputType> {
  try {
    // 1. Validate input
    const validatedInput = inputSchema.parse(input);
    
    // 2. Process with AI
    const result = await aiFlow(validatedInput);
    
    // 3. Return structured response
    return { success: true, data: result };
  } catch (error) {
    console.error('AI processing error:', error);
    return { success: false, error: 'AI processing failed' };
  }
}
```

#### Server Action Integration
```typescript
// ✅ CORRECT: Server action with AI integration
export async function analyzeData(data: any): Promise<ActionResult> {
  try {
    // Import AI function dynamically to avoid build issues
    const { analyzeFeedback } = await import('@/ai/flows/analyze-feedback-flow');
    const result = await analyzeFeedback(data);
    return { success: true, data: result };
  } catch (error) {
    return { success: false, error: 'Analysis failed' };
  }
}
```

### 🎯 AI Feature Implementation

#### Survey Analysis Features
- **Individual Feedback Analysis**: `analyzeSingleFeedback()` - Analyzes single submission
- **Bulk Survey Analysis**: `analyzeFeedbackForSurvey()` - Analyzes entire survey dataset
- **Interactive Chat**: `chatWithFeedbackData()` - Natural language queries
- **Report Generation**: `generateReport()` - Comprehensive markdown reports

#### Context-Aware AI
- **Survey Type Detection**: Automatically adapts to feedback vs consent vs overview
- **Dynamic Prompts**: Survey-specific analysis prompts and questions
- **Predefined Queries**: Smart questions based on survey type

### 🔧 Development & Testing

#### AI Development Workflow
1. **Update AI flows** in `src/ai/flows/`
2. **Test with Genkit dev server**: `npm run genkit:dev`
3. **Integrate with server actions** in `src/app/dashboard/actions.ts`
4. **Update UI components** in `src/components/`
5. **Test end-to-end** functionality

#### Testing AI Features
```bash
# Start AI development server
npm run genkit:dev

# Test AI flows independently
npm run genkit:watch

# Test full application
npm run dev
```

### 📊 AI Data Processing Rules

#### Input Validation
```typescript
// ✅ CORRECT: Always validate AI inputs
const aiInputSchema = z.object({
  query: z.string().min(1, 'Query cannot be empty'),
  data: z.array(z.any()).min(1, 'Data cannot be empty'),
  context: z.string().optional()
});
```

#### Output Processing
```typescript
// ✅ CORRECT: Structure AI outputs consistently
interface AIAnalysisResult {
  summary: string;
  sentiment: 'Positive' | 'Negative' | 'Neutral';
  keyTopics: string[];
  suggestedActions: string[];
}
```

### 🚀 Performance & Optimization

#### AI Model Configuration
- **Model**: Always use `gemini25FlashLite` for cost efficiency
- **Batch Processing**: Process multiple items together when possible
- **Caching**: Cache AI results for repeated queries
- **Rate Limiting**: Implement rate limiting for AI requests

#### Memory Management
```typescript
// ✅ CORRECT: Efficient AI data handling
const processLargeDataset = async (data: any[]) => {
  const batchSize = 50; // Process in batches
  const results = [];
  
  for (let i = 0; i < data.length; i += batchSize) {
    const batch = data.slice(i, i + batchSize);
    const batchResult = await processBatch(batch);
    results.push(...batchResult);
  }
  
  return results;
};
```

### 🔍 Error Handling & Monitoring

#### AI Error Patterns
```typescript
// ✅ CORRECT: Comprehensive AI error handling
export async function safeAICall<T>(aiFunction: () => Promise<T>): Promise<ActionResult<T>> {
  try {
    const result = await aiFunction();
    return { success: true, data: result };
  } catch (error) {
    console.error('AI call failed:', error);
    
    // Provide fallback based on error type
    if (error.message.includes('permission')) {
      return { success: false, error: 'Insufficient permissions for AI analysis' };
    } else if (error.message.includes('quota')) {
      return { success: false, error: 'AI service quota exceeded' };
    } else {
      return { success: false, error: 'AI analysis temporarily unavailable' };
    }
  }
}
```

#### Monitoring AI Usage
- **Log AI requests** for debugging and monitoring
- **Track AI response times** for performance optimization
- **Monitor AI error rates** for reliability
- **Alert on AI service failures** for quick resolution

### 🎨 UI/UX Integration

#### AI Chat Interface
- **Floating Chat Button**: Always visible, context-aware
- **Predefined Questions**: Survey-type specific suggestions
- **Loading States**: Clear feedback during AI processing
- **Error States**: User-friendly error messages

#### AI Analysis Display
- **Markdown Rendering**: Rich formatting for AI reports
- **Progressive Loading**: Show partial results as available
- **Export Options**: PDF generation for AI reports
- **Responsive Design**: Mobile-friendly AI interfaces

### 🔄 Maintenance & Updates

#### AI Model Updates
1. **Test new models** in development environment
2. **Update model references** in `src/ai/genkit.ts`
3. **Verify AI flows** still work with new model
4. **Update documentation** for new capabilities
5. **Deploy with monitoring** for performance tracking

#### AI Feature Additions
1. **Create new AI flow** in `src/ai/flows/`
2. **Add TypeScript types** in `src/ai/flows/types.ts`
3. **Integrate with server actions** in `src/app/dashboard/actions.ts`
4. **Update UI components** for new features
5. **Test end-to-end** functionality

### 🚨 Common Pitfalls & Solutions

#### ❌ Common Mistakes
- **Client-side AI calls** - Always use server actions
- **Missing error handling** - AI services can fail
- **Hardcoded responses** - Use dynamic AI generation
- **Ignoring context** - Survey-specific AI prompts
- **No fallbacks** - Provide alternatives when AI fails

#### ✅ Best Practices
- **Server-side only** - All AI calls through server actions
- **Comprehensive error handling** - Graceful degradation
- **Context-aware prompts** - Survey-specific AI responses
- **Performance monitoring** - Track AI usage and errors
- **User feedback** - Clear loading and error states

### 📋 AI System Checklist

#### Before Adding New AI Features
- [ ] Define clear input/output schemas
- [ ] Implement proper error handling
- [ ] Add TypeScript types
- [ ] Test with Genkit dev server
- [ ] Integrate with server actions
- [ ] Update UI components
- [ ] Test end-to-end functionality

#### Before Deploying AI Changes
- [ ] Verify API key configuration
- [ ] Test all AI flows
- [ ] Check error handling
- [ ] Validate UI integration
- [ ] Monitor performance
- [ ] Update documentation

### 🎯 AI Feature Roadmap

#### Current Features
- ✅ Individual feedback analysis
- ✅ Survey-wide analysis
- ✅ Interactive AI chat
- ✅ Report generation
- ✅ CSV import mapping

#### Planned Enhancements
- 🔄 Real-time AI insights
- 🔄 Advanced analytics
- 🔄 Predictive modeling
- 🔄 Automated recommendations
- 🔄 Multi-language support

---

## Quick Reference

### Essential Commands
```bash
# AI development
npm run genkit:dev          # Start AI dev server
npm run genkit:watch        # Watch mode for AI development

# Testing
npm run dev                 # Full application with AI
npm run build              # Production build with AI
```

### Key Files to Know
- `src/ai/genkit.ts` - AI configuration
- `src/ai/flows/` - AI processing flows
- `src/app/dashboard/actions.ts` - AI server actions
- `src/components/ai-chat-interface.tsx` - AI chat UI
- `.env.local` - AI API key configuration

### Emergency Procedures
1. **AI Service Down**: Check API key and quota
2. **Permission Errors**: Verify Firestore rules
3. **Performance Issues**: Check model configuration
4. **Integration Failures**: Verify server action setup

Remember: AI features are powerful but require careful implementation. Always test thoroughly and provide fallbacks for when AI services are unavailable.